[TOP]
package ${package};

import java.io.IOException;
import javax.annotation.CheckReturnValue;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.XMLEvent;

public class ${class} {

    private final XMLEventWriter w;

    public ${class}(XMLEventWriter w) {
        this.w = w;
    }

[SCOPE_CLASSES_START]
    public static class Stage {

[SCOPE_CLASS_START]
        public static class ${scope} {

            private final XMLEventWriter w;

            public ${scope}(XMLEventWriter w) {
                this.w = w;
            }

[SCOPE_CLASS_END]
        }

[SCOPE_CLASSES_END]
    }

[METHOD_COMMENT]
${indent}    /**
${indent}     * ${doc}
${indent}     *
${indent}     * @param content The tag content
${indent}     * @return Next stage in soap response
${indent}     * @throws XMLStreamException If printing XML fail
${indent}     * @throws IOException if output stream is closed or JSON fails
${indent}     */
[METHOD_COMMENT_NORETURN]
${indent}    /**
${indent}     * ${doc}
${indent}     *
${indent}     * @param content The tag content
${indent}     * @throws XMLStreamException If printing XML fail
${indent}     * @throws IOException if output stream is closed or JSON fails
${indent}     */
[METHOD_COMMENT_ANY]
${indent}    /**
${indent}     * ${doc}
${indent}     *
${indent}     * @param content Extra data from XMLEventReader
${indent}     * @return Next stage in soap response
${indent}     * @throws XMLStreamException If printing XML fail
${indent}     * @throws IOException if output stream is closed or JSON fails
${indent}     */
[METHOD_COMMENT_ANY_NORETURN]
${indent}    /**
${indent}     * ${doc}
${indent}     *
${indent}     * @param content Extra data from XMLEventReader
${indent}     * @throws XMLStreamException If printing XML fail
${indent}     * @throws IOException if output stream is closed or JSON fails
${indent}     */
[METHOD_COMMENT_SCOPE]
${indent}    /**
${indent}     * ${doc}
${indent}     *
${indent}     * @param ${method} The nested XML tags printer
${indent}     * @return Next stage in soap response
${indent}     * @throws XMLStreamException If printing XML fail
${indent}     * @throws IOException if output stream is closed or JSON fails
${indent}     */
[METHOD_COMMENT_SCOPE_NORETURN]
${indent}    /**
${indent}     * ${doc}
${indent}     *
${indent}     * @param ${method} The nested XML tags printer
${indent}     * @throws XMLStreamException If printing XML fail
${indent}     * @throws IOException if output stream is closed or JSON fails
${indent}     */
[METHOD_RETURNS]
${indent}    @CheckReturnValue
[METHOD_SCOPE]
${indent}    public ${return} ${method}(${root}.Scope<${package}.${type}> ${method}) throws XMLStreamException, IOException {
${indent}        w.add(EVENT.${method_upper}_OPEN);
${indent}        ${method}.apply(new ${package}.${type}(w));
${indent}        w.add(EVENT.${method_upper}_CLOSE);
[METHOD_SIMPLE]
${indent}    public ${return} ${method}(${type} content) throws XMLStreamException, IOException {
${indent}        w.add(EVENT.${method_upper}_OPEN);
${indent}        w.add(${root}.createCharacters(String.valueOf(content)));
${indent}        w.add(EVENT.${method_upper}_CLOSE);
[METHOD_STRING]
${indent}    public ${return} ${method}(String content) throws XMLStreamException, IOException {
${indent}        w.add(EVENT.${method_upper}_OPEN);
${indent}        w.add(${root}.createCharacters(content));
${indent}        w.add(EVENT.${method_upper}_CLOSE);
[METHOD_ANY]
${indent}    public ${return} ${method}(javax.xml.stream.XMLEventReader content) throws XMLStreamException, IOException {
${indent}        w.add(EVENT.${method_upper}_OPEN);
${indent}        w.add(${root}.filteredXMLEventReader(content));
${indent}        w.add(EVENT.${method_upper}_CLOSE);
[METHOD_ANY_NO_SCOPE]
${indent}    public ${return} ${method}(javax.xml.stream.XMLEventReader content) throws XMLStreamException, IOException {
${indent}        w.add(${root}.filteredXMLEventReader(content));
[METHOD_SPECIAL_DATE]
${indent}    public ${return} ${method}(java.util.Date content) throws XMLStreamException, IOException {
${indent}        w.add(EVENT.${method_upper}_OPEN);
${indent}        w.add(${root}.createCharacters(${root}.DATE_FORMAT.format(content)));
${indent}        w.add(EVENT.${method_upper}_CLOSE);
[METHOD_RETURN]
${indent}        return new ${return}(w);
[METHOD_RETURN_THIS]
${indent}        return this;
[METHOD_END]
${indent}    }

[TAGS_START]
    private static class EVENT {
[TAG]
        private static final XMLEvent ${tagname_upper}_OPEN = ${root}.elementOpen${prefix}("${tagname}");
        private static final XMLEvent ${tagname_upper}_CLOSE = ${root}.elementClose${prefix}("${tagname}");
[TAGS_END]
    }

[BOTTOM]
}
