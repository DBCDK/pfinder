package ${package};

import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import javax.xml.stream.XMLEventFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.XMLEvent;

import static java.util.Collections.EMPTY_LIST;
import static javax.xml.stream.XMLStreamConstants.*;

public class ${root} {

    /**
     * used for identifying generated classes
     */
    public interface ScopedOutput {
    }

    /**
     * Named like this to avoid name collision with generated classes
     *
     * @param <T> The scope that is nested within this operation
     */
    @FunctionalInterface
    public interface Scope<T> {

        void apply(T t) throws XMLStreamException, IOException;

    }

    /**
     * Named like this to avoid name collision with generated classes
     *
     * @param <T> The scope that is nested within this operation
     * @param <R> The scope is after T is processed
     */
    @FunctionalInterface
    public interface ScopeWithReturn<T, R extends ScopedOutput> {

        R apply(T t) throws XMLStreamException, IOException;

    }

    public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

    private final XMLEventWriter w;

    public Root(XMLEventWriter w) {
        this.w = w;
    }

    public Root(OutputStream os) throws XMLStreamException {
        this.w = O.createXMLEventWriter(os, "UTF-8");
    }

    public void soapEnvelope(Scope<EntryPoint> outputBuilder) throws XMLStreamException, IOException {
        w.add(EVENT.DOCUMENT_START);
        w.add(EVENT.SOAP_ENV_OPEN);
        w.add(EVENT.SOAP_BODY_OPEN);
        outputBuilder.apply(new EntryPoint(w));
        w.add(EVENT.SOAP_BODY_CLOSE);
        w.add(EVENT.SOAP_ENV_CLOSE);
        w.close();
    }

    public void xmlEnvelope(Scope<EntryPoint> outputBuilder) throws XMLStreamException, IOException {
        w.add(EVENT.DOCUMENT_START);
        outputBuilder.apply(new EntryPoint(w));
        w.close();
    }

    public void noEnvelope(Scope<EntryPoint> outputBuilder) throws XMLStreamException, IOException {
        outputBuilder.apply(new EntryPoint(w));
        w.close();
    }

[ENTRYPOINTS_START]
    public static class EntryPoint {

        private final XMLEventWriter w;

        public EntryPoint(XMLEventWriter w) {
            this.w = w;
        }

[ENTRYPOINT_COMMENT]
        /**
         * ${doc}
         *
         * @param ${method} The nested XML tags printer
         * @throws XMLStreamException If printing XML fail
         * @throws IOException if output stream is closed or JSON fails
         */
[ENTRYPOINT]
        public void ${method}(${root}.Scope<${type}> ${method}) throws XMLStreamException, IOException {
            w.add(EVENT.${method_upper}_OPEN);
            ${method}.apply(new ${type}(w));
            w.add(EVENT.${method_upper}_CLOSE);
        }

[ENTRYPOINTS_END]
    }

    private static final XMLEventFactory E = makeXMLEventFactory();
    private static final XMLInputFactory I = makeXMLInputFactory();
    private static final XMLOutputFactory O = makeXMLOutputFactory();

    private static final int EVENT_FILTER = ( 1 << PROCESSING_INSTRUCTION ) | ( 1 << COMMENT ) | ( 1 << SPACE ) |
                                            ( 1 << START_DOCUMENT ) | ( 1 << END_DOCUMENT ) |
                                            ( 1 << ENTITY_REFERENCE ) | ( 1 << ATTRIBUTE ) |
                                            ( 1 << DTD ) | ( 1 << NAMESPACE ) | ( 1 << NOTATION_DECLARATION ) |
                                            ( 1 << ENTITY_DECLARATION );

    private static XMLEventFactory makeXMLEventFactory() {
        synchronized (XMLEventFactory.class) {
            return XMLEventFactory.newInstance();
        }
    }

    private static XMLInputFactory makeXMLInputFactory() {
        synchronized (XMLInputFactory.class) {
            return XMLInputFactory.newInstance();
        }
    }

    private static XMLOutputFactory makeXMLOutputFactory() {
        synchronized (XMLOutputFactory.class) {
            return XMLOutputFactory.newInstance();
        }
    }

    static XMLEventReader filteredXMLEventReader(XMLEventReader r) throws XMLStreamException {
        return I.createFilteredReader(r, e -> ( EVENT_FILTER & ( 1 << e.getEventType() ) ) == 0);
    }

    static XMLEvent createCharacters(String characters) {
        return E.createCharacters(characters);
    }

[NAMESPACE]
    private static final String NS_${name}_PREFIX = "${prefix}";
    private static final String NS_${name}_URI = "${uri}";
    private static final XMLEvent NS_${name} = E.createNamespace(NS_${name}_PREFIX, NS_${name}_URI);

    static XMLEvent elementOpen${name}(String tag) {
        return E.createStartElement(NS_${name}_PREFIX, NS_${name}_URI, tag);
    }

    static XMLEvent elementClose${name}(String tag) {
        return E.createEndElement(NS_${name}_PREFIX, NS_${name}_URI, tag);
    }

[TAGS_START]
    private static class EVENT {
        // Hardcoded soap namespaces
        private static final XMLEvent DOCUMENT_START = E.createStartDocument("utf-8", "1.0", true);
        private static final XMLEvent SOAP_ENV_OPEN = E.createStartElement("xs", "http://www.w3.org/2001/XMLSchema", "Envelope",
                                    EMPTY_LIST.iterator(),
                                    Arrays.asList(
                                            E.createNamespace("xs", "http://www.w3.org/2001/XMLSchema")
                                    ).iterator());
        private static final XMLEvent SOAP_BODY_OPEN = E.createStartElement("xs", "http://www.w3.org/2001/XMLSchema", "Body");
        private static final XMLEvent SOAP_BODY_CLOSE = E.createEndElement("xs", "http://www.w3.org/2001/XMLSchema", "Body");
        private static final XMLEvent SOAP_ENV_CLOSE = E.createEndElement("xs", "http://www.w3.org/2001/XMLSchema", "Envelope");

        // Dynamic
[TAG]
        private static final XMLEvent ${tagname_upper}_OPEN = E.createStartElement(NS_${prefix}_PREFIX, NS_${prefix}_URI, "${tagname}",
                                    EMPTY_LIST.iterator(),
                                    Arrays.asList(${extra_ns}).iterator());
        private static final XMLEvent ${tagname_upper}_CLOSE = E.createEndElement(NS_${prefix}_PREFIX, NS_${prefix}_URI, "${tagname}");
[TAGS_END]
    }

[BOTTOM]
}
